using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Collections;

namespace Inference
{
    public partial class MainForm : Form
    {
        struct Position
        {
            public float X;
            public float Y;
        }


        public const float VALEUR_MAX_BORNE = 11.00F;
        public const float VALEUR_MIN_BORNE = 0.00F;

        public const float VALEUR_MIN_Y = 0.0F;
        public const float VALEUR_MAX_Y_F1 = 5.0F;
        public const float VALEUR_MAX_Y_F2 = 5.0F;
        public const float VALEUR_MAX_Y_F3 = 12.0F;
        public const float VALEUR_MAX_Y_F4 = 10.0F;
        public const float VALEUR_MAX_Y_F5 = 4.0F;



        public const int PRECISION_DECIMALES = 4;

        public const int NOMBRE_POINTS_ALEATOIRE = 10000;

        private int nombre_Points_valide = 0;

        private List<RadioButton> listeFonction = new List<RadioButton>();

        private Random random = new Random();


        public MainForm()
        {
            InitializeComponent();
        }


        private void MainForm_Load(object sender, EventArgs e)
        {
            // ajout des radiobuttons dans une liste afin
            // de pouvoir les utiliser dans une boucle
            listeFonction.Add(RBTN_F1);
            listeFonction.Add(RBTN_F2);
            listeFonction.Add(RBTN_F3);
            listeFonction.Add(RBTN_F4);
            listeFonction.Add(RBTN_F5);
        }

        private bool Fonction3(Position p)
        {
            float value = -(1.0f / 3.0f);
            value = value * float.Parse(Math.Pow((p.X - 6), 2).ToString());
            value += 12;
            return float.Parse(p.Y.ToString()) <= value;
        }

        private bool Fonction4(Position p)
        {
            double value = p.X + Math.Sin(p.X);
            return p.Y <= value;
        }

        private bool Fonction5(Position p)
        {
            double value = Math.Cos(p.X) + 3;
            return p.Y <= value;

        }

        public float GenererFloat()
        {
            float randomNumber = random.Next(0, 11);

            return randomNumber;
        }

        private void BTN_Executer_Click(object sender, EventArgs e)
        {
            int fonction = 0;
            for (int i = 0; i < listeFonction.Count; i++)
            {
                if(listeFonction[i].Checked)
                {
                    fonction = i;
                    break; //optimisation
                }
            }

            Position point;
            for (int i = 0; i < NOMBRE_POINTS_ALEATOIRE; i++ )
            {
                point.X = GenererFloat();

                switch (fonction)
                {
                    case 1: point.Y = random.Next(0, VALEUR_MAX_Y_F1+1);
                        break;
                    case 2: point.Y = random.Next(0, 5);
                        break;
                    case 3: point.Y = random.Next(0, 12);
                        Fonction3(point);
                        break;
                    case 4: point.Y = random.Next(0, 10);
                        Fonction4(point);
                        break;
                    case 5: point.Y = random.Next(0, 4);
                        Fonction5(point);
                        break;
                    default:
                        // problème avec le programme
                        break;
                }
            }

        }




    }
}
